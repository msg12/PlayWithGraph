/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assign;

import static assign.click.*;
import static assign.click.pts;
import static assign.first.animate;
import static assign.pathdisplay.circlee;
import static assign.pathdisplay.countt;
import static assign.pathdisplay.crosss;
import static assign.pathdisplay.currentpath;
import static assign.pathdisplay.pluss;
import static assign.pathdisplay.squaree;
import static assign.pathdisplay.trianglee;
import java.awt.*;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import javax.swing.*;

/**
 *
 * @author kaun_meet
 */
public class interaction extends javax.swing.JFrame implements Runnable {

    static int[] xxx = new int[5];
    static int[] yyy = new int[5];
    static int count1 = 0;

    public void run() {
//count1=
        int gh = count1;
//        count1++;

        System.out.println("drdy  " + gh);
        int i;
        for (i = 0; i < animate[gh].size(); i++) {
            try {
                int hf = animate[gh].get(i).x;
                int hg = animate[gh].get(i).y;

                xxx[gh] = hf;
                yyy[gh] = hg;
                
                repaint();

                try {
                    sleep((long) 50);
                } catch (Exception e) {

                }
                if (i == animate[gh].size() - 1) {
                    i = 0;
                }

            } catch (Exception e) {

            }
//            /g2.fillOval(hf, hg, 5, 5);

        }

    }

    /**
     * Creates new form interaction
     */
    public interaction() {

        initComponents();
 System.out.println("drdy  " );
 
        try {
            System.out.println(countt + " " + "thr.finy");

            repaint();
            count1 = 0;

            for (int i = 0; i < countt; i++) {
                System.out.println(animate[i].size());

                if (animate[i].size() != 0) {
                    (new Thread(this)).start();
                }
                sleep(500);
                count1++;
            }

        } catch (Exception e) {

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField2 = new java.awt.TextField();
        click interact;
        interact = new click();
        ww = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        textField2.setText("textField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        interact.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                interactMouseDragged(evt);
            }
        });
        interact.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                interactFocusLost(evt);
            }
        });
        interact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                interactMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                interactMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                interactMouseReleased(evt);
            }
        });
        interact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                interactKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                interactKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout interactLayout = new javax.swing.GroupLayout(interact);
        interact.setLayout(interactLayout);
        interactLayout.setHorizontalGroup(
            interactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );
        interactLayout.setVerticalGroup(
            interactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        ww.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wwActionPerformed(evt);
            }
        });

        jButton1.setText("delete vertex");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("modify vertex");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("add edge");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("modify weight");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("delete edge");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Stop Animation");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(interact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(111, 111, 111))
                            .addComponent(jButton3)
                            .addComponent(ww, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5)
                            .addComponent(jButton2)
                            .addComponent(jButton6))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ww, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addGap(184, 184, 184))
            .addComponent(interact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 static ArrayList<Integer> xc = new ArrayList<Integer>();
    static ArrayList<Integer> yc = new ArrayList<Integer>();
    static ArrayList<Integer> mxc = new ArrayList<Integer>();
    static ArrayList<Integer> myc = new ArrayList<Integer>();
    static ArrayList<Integer> delxc = new ArrayList<Integer>();
    static ArrayList<Integer> delyc = new ArrayList<Integer>();
    static ArrayList<Integer> deledgexc = new ArrayList<Integer>();
    static ArrayList<Integer> deledgeyc = new ArrayList<Integer>();
    static ArrayList<Integer> modifyvertexx = new ArrayList<Integer>();
    static ArrayList<Integer> modifyvertexy = new ArrayList<Integer>();


    private void interactMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_interactMouseClicked
        try {
            if (deletev == 1) {
                int delx = evt.getX(), dely = evt.getY();
                int index = -1;
//  for(Point pp: pts){
                int i;
                for (i = 0; i < pts.size(); i++) {
                    Point pp = pts.get(i);

                    if (((pp.x - delx) * (pp.x - delx) + (pp.y - dely) * (pp.y - dely)) <= 900) {
                        index = i;
                        break;
                    }
                }
                System.out.println("index" + index);
                if (index != -1) {
                    int removex = pts.get(index).x;
                    int removey = pts.get(index).y;
                    pts.remove(index);
                    allvertex.remove(index);

                    click.namepts.remove(index);
                    i = 0;
                    ArrayList<Integer> remo = new ArrayList<Integer>();
                    for (i = 0; i < click.firstofedge.size(); i++) {
                        if (click.firstofedge.get(i).x == removex && click.firstofedge.get(i).y == removey) {
                            remo.add(i);
                        } else if (click.lastofedge.get(i).x == removex && click.lastofedge.get(i).y == removey) {
                            remo.add(i);
                        }
                    }
                    for (i = remo.size() - 1; i >= 0; i--) {
                        int w = remo.get(i);
                        click.firstofedge.remove(w);
                        click.lastofedge.remove(w);
                        click.weigh.remove(w);
                        alledge.remove(w);

                    }

                }

                deletev = 0;
                repaint();

            } else {

                int x;
                int y;
                x = evt.getX();
                y = evt.getY();
                System.out.println("CLICKED " + x + " " + y);
//click.paintComponent(interact);
//click.circle(x,y);
//pts.add(new Point(x,y));
                int check = 1;
                for (Point pp : pts) {
                    int anyx = pp.x;
                    int anyy = pp.y;
                    if (((x - anyx) * (x - anyx) + (y - anyy) * (y - anyy)) <= 3600) {
                        check = 0;
                    }
//            g1.fillOval(pp.x, pp.y, 20, 20);

                }
                if (check == 1) {
                    String name;
                    name = JOptionPane.showInputDialog("name of  vertex");
                    if(name.length()>0){
                    click.add_ver(name, x, y);
                        
                    }
                    repaint();
                }
            }

        } catch (Exception e) {

        }
// TODO add your handling code here:
    }//GEN-LAST:event_interactMouseClicked
//    int modify = 0;
    private void interactMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_interactMouseDragged
        try {
            if (deletee == 1) {

                int x = evt.getX();
                int y = evt.getY();

                deledgexc.add(x);
                deledgeyc.add(y);
//          

            }

            if (inserte == 1) {

                int x = evt.getX();
                int y = evt.getY();

                xc.add(x);
                yc.add(y);
//            System.out.println(xc.size());
            }
//        if (deletee == 1) {
//            int x = evt.getX();
//            int y = evt.getY();
//
//            delxc.add(x);
//            delyc.add(y);
//
//        }

//if(insertedgee==1){
            //
            //}
            if (modifyv == 1) {
                int x = evt.getX();
                int y = evt.getY();
//          
                modifyvertexx.add(x);
                modifyvertexy.add(y);

            }
            if (modifye == 1) {
//            System.out.println(modify);
                int x = evt.getX();
                int y = evt.getY();
//            System.out.println(x + " " + y);
                mxc.add(x);
                myc.add(y);

//            modify = 0;
            }
        } catch (Exception e) {

        }

//        System.out.println("DRAGGED " + x + " " + y);
        // TODO add your handling code here:
    }//GEN-LAST:event_interactMouseDragged

    private void interactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_interactKeyPressed
        System.out.println("brqqq");
        System.out.println("code" + evt.getKeyCode());

        // TODO add your handling code here:
    }//GEN-LAST:event_interactKeyPressed

    private void interactKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_interactKeyTyped
//    evt.getKeyCode()
        System.out.println("brqqq");
        System.out.println("code" + evt.getKeyCode());

// TODO add your handling code here:
    }//GEN-LAST:event_interactKeyTyped

    private void interactFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_interactFocusLost
        System.out.println("FOCUS LOST");
        // TODO add your handling code here:
    }//GEN-LAST:event_interactFocusLost

    int deletev = 0;
    int deletee = 0;
    int inserte = 0;
    int insertv = 0;
    int modifyv = 0;
    int modifye = 0;


    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        deletee = 1;
// TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void interactMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_interactMouseReleased
        try {
            if (modifyv == 1) {
                int fxx = modifyvertexx.get(0);
                int fyy = modifyvertexy.get(0);

                int index1 = -1;
                int i = 0;

                for (i = 0; i < allvertex.size(); i++) {
                    int xx = allvertex.get(i).xcoor;
                    int yy = allvertex.get(i).ycoor;

                    if ((((fxx - xx) * (fxx - xx)) + ((fyy - yy) * (fyy - yy))) <= 900) {
                        index1 = i;
                        fxx = xx;
                        fyy = yy;

                        break;
                    }

                }
                int delx = evt.getX();
                int dely = evt.getY();
                int mark = -1;

                int index2 = 1;
                for (i = 0; i < allvertex.size(); i++) {
                    int xx = allvertex.get(i).xcoor;
                    int yy = allvertex.get(i).ycoor;
                    if (xx == fxx && yy == fyy) {
                        continue;
                    }

                    if ((((xx - delx) * (xx - delx)) + ((yy - dely) * (yy - dely))) <= 1500) {
                        index2 = -1;
//                    delx=xx;
//                    dely=yy;
                        break;
                    }

                }
                if (index1 == -1 || index2 == -1) {
                    System.out.println("Select properly !!!! ");
                } else {

                    allvertex.get(index1).xcoor = delx;
                    allvertex.get(index1).ycoor = dely;
                    int xhai = pts.get(index1).x;
                    int yhai = pts.get(index1).y;

                    pts.get(index1).x = delx;
                    pts.get(index1).y = dely;

//                int i;
                    for (i = 0; i < alledge.size(); i++) {
                        if (firstofedge.get(i).x == xhai && firstofedge.get(i).y == yhai) {
                            firstofedge.get(i).x = delx;
                            firstofedge.get(i).y = dely;
                        }
                        if (lastofedge.get(i).x == xhai && lastofedge.get(i).y == yhai) {
                            lastofedge.get(i).x = delx;
                            lastofedge.get(i).y = dely;
                        }

                    }

                }

//                String str, strr;
//                str = allvertex.get(index1).namevertex;
//                strr = allvertex.get(index2).namevertex;
//                int gg = -1;
//                for (i = 0; i < alledge.size(); i++) {
//                    if (alledge.get(i).tovertex.equals(strr) && alledge.get(i).fromvertex.equals(str)) {
//                        gg = i;
//                        break;
//                    }
//                }
//                if (gg != -1) {
//                    firstofedge.remove(gg);
//                    lastofedge.remove(gg);
//                    weigh.remove(gg);
//                    alledge.remove(gg);
//                }
//                repaint();
//
//            }
                modifyv = 0;
                modifyvertexx.clear();
                modifyvertexy.clear();

//
//            }
                repaint();

            }

            if (deletee == 1) {
                int fxx = deledgexc.get(0);
                int fyy = deledgeyc.get(0);

                int index1 = -1;
                int i = 0;

                for (i = 0; i < allvertex.size(); i++) {
                    int xx = allvertex.get(i).xcoor;
                    int yy = allvertex.get(i).ycoor;

                    if ((((fxx - xx) * (fxx - xx)) + ((fyy - yy) * (fyy - yy))) <= 900) {
                        index1 = i;
                        fxx = xx;
                        fyy = yy;

                        break;
                    }

                }
                int delx = evt.getX();
                int dely = evt.getY();
                int mark = -1;

                int index2 = -1;
                for (i = 0; i < allvertex.size(); i++) {
                    int xx = allvertex.get(i).xcoor;
                    int yy = allvertex.get(i).ycoor;

                    if ((((xx - delx) * (xx - delx)) + ((yy - dely) * (yy - dely))) <= 900) {
                        index2 = i;
                        delx = xx;
                        dely = yy;
                        break;
                    }

                }
                if (index1 == -1 || index2 == -1) {
                    JOptionPane.showMessageDialog(null, "Select properly !!!!");

//                System.out.println("Select properly !!!! ");
                } else {
                    String str, strr;
                    str = allvertex.get(index1).namevertex;
                    strr = allvertex.get(index2).namevertex;
                    int gg = -1;
                    for (i = 0; i < alledge.size(); i++) {
                        if (alledge.get(i).tovertex.equals(strr) && alledge.get(i).fromvertex.equals(str)) {
                            gg = i;
                            break;
                        }
                    }
                    if (gg != -1) {
                        firstofedge.remove(gg);
                        lastofedge.remove(gg);
                        weigh.remove(gg);
                        alledge.remove(gg);
                    }
                    repaint();

                }

                deletee = 0;
                deledgexc.clear();
                deledgeyc.clear();

//
//            }
                repaint();

            }

//        if (modifye == 1) {
//            int fxx = mxc.get(0);
//            int fyy = myc.get(0);
//
//            int index1 = -1;
//            int i = 0;
//
//            for (i = 0; i < allvertex.size(); i++) {
//                int xx = allvertex.get(i).xcoor;
//                int yy = allvertex.get(i).ycoor;
//
//                if ((((fxx - xx) * (fxx - xx)) + ((fyy - yy) * (fyy - yy))) <= 900) {
//                    index1 = i;
//                    break;
//                }
//
//            }
//            int delx = evt.getX();
//            int dely = evt.getY();
//            int mark = -1;
//
//            int index2 = -1;
//            for (i = 0; i < allvertex.size(); i++) {
//                int xx = allvertex.get(i).xcoor;
//                int yy = allvertex.get(i).ycoor;
//
//                if ((((fxx - delx) * (fxx - delx)) + ((fyy - dely) * (fyy - dely))) <= 900) {
//                    index2 = i;
//                    break;
//                }
//
//            }
//            if (index1 == -1 || index2 == -1) {
//                System.out.println("Select properly !!!! ");
////            }
//        else {
//                String str, strr;
//                str = allvertex.get(index1).namevertex;
//                strr = allvertex.get(index2).namevertex;
//                int gg = -1;
//                for (i = 0; i < alledge.size(); i++) {
//                    if (alledge.get(i).tovertex.equals(strr) && alledge.get(i).fromvertex.equals(str)) {
//                        gg = i;
//                        break;
//                    }
//                }
//                if (gg != -1) {
////                    firstofedge.remove(gg);
////                    lastofedge.remove(gg);
////                    weigh.remove(gg);
////                    alledge.remove(gg);
//                    weigh.set(gg, 0);
//                    alledge.get(gg).weightedge = 0;
//                }
//                repaint();
//
//            }
//
//            modifye = 0;
//            mxc.clear();
//            myc.clear();
//
////
////            }
//            repaint();
//
//        }
            if (inserte == 1) {
                if (xc.size() == 0) {
//                continue;
//break
                    return;
                }
                int fxx = xc.get(0);
                int fyy = yc.get(0);

                int index1 = -1;
                int i = 0;

                for (i = 0; i < allvertex.size(); i++) {
                    int xx = allvertex.get(i).xcoor;
                    int yy = allvertex.get(i).ycoor;

                    if ((((fxx - xx) * (fxx - xx)) + ((fyy - yy) * (fyy - yy))) <= 900) {
                        fxx = xx;
                        fyy = yy;

                        index1 = i;
                        break;
                    }

                }
                int delx = evt.getX();
                int dely = evt.getY();
                int mark = -1;

                int index2 = -1;
                for (i = 0; i < allvertex.size(); i++) {
                    int xx = allvertex.get(i).xcoor;
                    int yy = allvertex.get(i).ycoor;

                    if ((((xx - delx) * (xx - delx)) + ((yy - dely) * (yy - dely))) <= 900) {
                        index2 = i;
                        delx = xx;
                        dely = yy;

                        break;
                    }

                }
                if (index1 == -1 || index2 == -1) {
                    JOptionPane.showMessageDialog(null, "Select properly !!!!");

//                System.out.println("Select properly !!!! ");
                } else {
                    String str, strr;
                    str = allvertex.get(index1).namevertex;
                    strr = allvertex.get(index2).namevertex;
                    int gg = 0;
                    String fg = ww.getText();
                    gg = Integer.parseInt(fg);

//                for (i = 0; i < alledge.size(); i++) {
//                    if (alledge.get(i).tovertex.equals(strr) && alledge.get(i).fromvertex.equals(str)) {
//                        gg = i;
//                        break;
//                    }
//                }
                    if (gg > 0) {

                        firstofedge.add(new Point(fxx, fyy));
                        lastofedge.add(new Point(delx, dely));
                        weigh.add(gg);
                        alledge.add(new saareedge(str, strr, gg));

//                    firstofedge.remove(gg);
//                    lastofedge.remove(gg);
//                    weigh.remove(gg);
//                    alledge.remove(gg);
//                    weigh.set(gg, 0);
//                    alledge.get(gg).weightedge = 0;
                    }
                    repaint();

                }

                inserte = 0;
                xc.clear();
                yc.clear();

//
//            }
                repaint();

            }

            if (modifye == 1) {
                int fxx = mxc.get(0);
                int fyy = myc.get(0);

                int index1 = -1;
                int i = 0;

                for (i = 0; i < allvertex.size(); i++) {
                    int xx = allvertex.get(i).xcoor;
                    int yy = allvertex.get(i).ycoor;

                    if ((((fxx - xx) * (fxx - xx)) + ((fyy - yy) * (fyy - yy))) <= 900) {
                        index1 = i;
                        break;
                    }

                }
                int delx = evt.getX();
                int dely = evt.getY();
                int mark = -1;

                int index2 = -1;
                for (i = 0; i < allvertex.size(); i++) {
                    int xx = allvertex.get(i).xcoor;
                    int yy = allvertex.get(i).ycoor;

                    if ((((xx - delx) * (xx - delx)) + ((yy - dely) * (yy - dely))) <= 900) {
                        index2 = i;
                        break;
                    }

                }
                if (index1 == -1 || index2 == -1) {
                    JOptionPane.showMessageDialog(null, "Select properly !!!!");

//                System.out.println("Select pro per ly !!!! ");
                } else {

//                allvertex.add(getBaseline(index1, HEIGHT)).
//                allvertex.get(index1).xcoor = delx;
//                allvertex.get(index1).ycoor = dely;
                    String bb1 = allvertex.get(index1).namevertex;
                    String bb2 = allvertex.get(index2).namevertex;
                    int edgehai = -1;
                    for (i = 0; i < alledge.size(); i++) {

//                    if(firstofedge.get(i).x)
                        if (alledge.get(i).fromvertex.equals(bb1) && alledge.get(i).tovertex.equals(bb2)) {
                            edgehai = i;
                            break;
                        }
                    }

                    if (edgehai == -1) {

                    } else {
                        String fg = ww.getText();
                        int gg = Integer.parseInt(fg);

                        alledge.get(edgehai).weightedge = gg;
//                   alledge.set(edgehai,gg);
                        weigh.set(edgehai, gg);
//                    weigh.get(edgehai)=gg;

                    }
                    modifye = 0;
                    mxc.clear();
                    myc.clear();

//
                }
                repaint();

            }
        } catch (Exception e) {

        }

// TODO add your handling code here:
    }//GEN-LAST:event_interactMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        modifye = 1;
// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        deletev = 1;
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void wwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wwActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wwActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        modifyv = 1;
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        inserte = 1;        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void interactMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_interactMousePressed

        // TODO add your handling code here:
    }//GEN-LAST:event_interactMousePressed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
//        animate.clear();
countt=0;







//                    firstofedge.remove(gg);
//                    lastofedge.remove(gg);
//                    weigh.remove(gg);
//                    alledge.remove(gg);
//                    weigh.set(gg, 0);
//                    alledge.get(gg).weightedge = 0;
count1=0;
for(int i=0;i<5;i++){
    animate[i].clear();
}      
repaint();
        this.dispose();

// TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interaction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel interact;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private java.awt.TextField textField2;
    private javax.swing.JTextField ww;
    // End of variables declaration//GEN-END:variables
}
